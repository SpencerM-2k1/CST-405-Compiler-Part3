State 0 conflicts: 1 shift/reduce
State 5 conflicts: 1 shift/reduce
State 6 conflicts: 1 shift/reduce
State 7 conflicts: 1 shift/reduce
State 106 conflicts: 1 shift/reduce
State 108 conflicts: 2 shift/reduce
State 109 conflicts: 1 shift/reduce
State 115 conflicts: 1 shift/reduce
State 124 conflicts: 9 reduce/reduce
State 131 conflicts: 2 shift/reduce


Grammar

    0 $accept: Program $end

    1 Program: DeclList StmtList

    2 DeclList: ε
    3         | VarDecl DeclList
    4         | VarDeclInit DeclList
    5         | FuncDecl DeclList

    6 VarDeclList: ε
    7            | VarDecl VarDeclList

    8 VarDecl: TYPE ID SEMI
    9        | ARRAY TYPE ID LBRACKET INT_NUMBER RBRACKET SEMI

   10 VarDeclInit: TYPE ID ASSIGN Expr SEMI

   11 @1: ε

   12 FuncDecl: TYPE ID @1 LPAREN ParamList RPAREN LBRACE VarDeclList StmtList RBRACE

   13 ParamList: ε
   14          | Param
   15          | Param COMMA ParamList

   16 Param: TYPE ID

   17 StmtList: ε
   18         | Stmt StmtList

   19 Stmt: ID ASSIGN Expr SEMI
   20     | ID LBRACKET Expr RBRACKET ASSIGN Expr SEMI
   21     | VarDeclInit
   22     | WRITE Expr SEMI
   23     | FuncCall SEMI
   24     | ReturnStmt SEMI
   25     | IfStmt

   26 IfStmt: IF LPAREN Expr RPAREN Block
   27       | IF LPAREN Expr RPAREN Block ELSE Block
   28       | IF LPAREN Expr RPAREN Block ElifList

   29 ElifList: ELIF LPAREN Expr RPAREN Block
   30         | ELIF LPAREN Expr RPAREN Block ElifList
   31         | ELSE Block

   32 Block: LBRACE VarDeclList StmtList RBRACE
   33      | Stmt

   34 Expr: MINUS Expr
   35     | NOT Expr
   36     | Expr PLUS Expr
   37     | Expr MINUS Expr
   38     | Expr MULTIPLY Expr
   39     | Expr DIVIDE Expr
   40     | Expr AND Expr
   41     | Expr OR Expr
   42     | Expr GREATER_THAN Expr
   43     | Expr LESS_THAN Expr
   44     | Expr GREATER_EQUAL Expr
   45     | Expr LESS_EQUAL Expr
   46     | Expr EQUAL_EQUAL Expr
   47     | Expr NOT_EQUAL Expr
   48     | ID
   49     | ID LBRACKET Expr RBRACKET
   50     | INT_NUMBER
   51     | FLOAT_NUMBER
   52     | CHAR_VALUE
   53     | CONST_TRUE
   54     | CONST_FALSE
   55     | FuncCall
   56     | LPAREN Expr RPAREN

   57 FuncCall: ID LPAREN ArgList RPAREN

   58 ArgList: ε
   59        | Arg
   60        | Arg COMMA ArgList

   61 Arg: Expr

   62 ReturnStmt: RETURN
   63           | RETURN Expr


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    TYPE <sval> (258) 8 9 10 12 16
    ID <sval> (259) 8 9 10 12 16 19 20 48 49 57
    SEMI (260) 8 9 10 19 20 22 23 24
    ASSIGN <sval> (261) 10 19 20
    INT_NUMBER <intVal> (262) 9 50
    FLOAT_NUMBER <floatVal> (263) 51
    CHAR_VALUE <charVal> (264) 52
    CONST_TRUE (265) 53
    CONST_FALSE (266) 54
    WRITE (267) 22
    ARRAY (268) 9
    RETURN (269) 62 63
    LPAREN (270) 12 26 27 28 29 30 56 57
    RPAREN (271) 12 26 27 28 29 30 56 57
    LBRACE (272) 12 32
    RBRACE (273) 12 32
    LBRACKET (274) 9 20 49
    RBRACKET (275) 9 20 49
    COMMA (276) 15 60
    IF (277) 26 27 28
    ELSE (278) 27 31
    ELIF (279) 29 30
    NOT <sval> (280) 35
    AND <sval> (281) 40
    OR <sval> (282) 41
    GREATER_THAN <sval> (283) 42
    LESS_THAN <sval> (284) 43
    EQUAL_EQUAL <sval> (285) 46
    NOT_EQUAL <sval> (286) 47
    GREATER_EQUAL <sval> (287) 44
    LESS_EQUAL <sval> (288) 45
    PLUS <sval> (289) 36
    MINUS <sval> (290) 34 37
    MULTIPLY <sval> (291) 38
    DIVIDE <sval> (292) 39


Nonterminals, with rules where they appear

    $accept (38)
        on left: 0
    Program <ast> (39)
        on left: 1
        on right: 0
    DeclList <ast> (40)
        on left: 2 3 4 5
        on right: 1 3 4 5
    VarDeclList <ast> (41)
        on left: 6 7
        on right: 7 12 32
    VarDecl <ast> (42)
        on left: 8 9
        on right: 3 7
    VarDeclInit <ast> (43)
        on left: 10
        on right: 4 21
    FuncDecl <ast> (44)
        on left: 12
        on right: 5
    @1 (45)
        on left: 11
        on right: 12
    ParamList <ast> (46)
        on left: 13 14 15
        on right: 12 15
    Param <ast> (47)
        on left: 16
        on right: 14 15
    StmtList <ast> (48)
        on left: 17 18
        on right: 1 12 18 32
    Stmt <ast> (49)
        on left: 19 20 21 22 23 24 25
        on right: 18 33
    IfStmt <ast> (50)
        on left: 26 27 28
        on right: 25
    ElifList <ast> (51)
        on left: 29 30 31
        on right: 28 30
    Block <ast> (52)
        on left: 32 33
        on right: 26 27 28 29 30 31
    Expr <ast> (53)
        on left: 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56
        on right: 10 19 20 22 26 27 28 29 30 34 35 36 37 38 39 40 41 42 43 44 45 46 47 49 56 61 63
    FuncCall <ast> (54)
        on left: 57
        on right: 23 55
    ArgList <ast> (55)
        on left: 58 59 60
        on right: 57 60
    Arg <ast> (56)
        on left: 61
        on right: 59 60
    ReturnStmt <ast> (57)
        on left: 62 63
        on right: 24


State 0

    0 $accept: • Program $end

    TYPE   shift, and go to state 1
    ARRAY  shift, and go to state 2

    TYPE      [reduce using rule 2 (DeclList)]
    $default  reduce using rule 2 (DeclList)

    Program      go to state 3
    DeclList     go to state 4
    VarDecl      go to state 5
    VarDeclInit  go to state 6
    FuncDecl     go to state 7


State 1

    8 VarDecl: TYPE • ID SEMI
   10 VarDeclInit: TYPE • ID ASSIGN Expr SEMI
   12 FuncDecl: TYPE • ID @1 LPAREN ParamList RPAREN LBRACE VarDeclList StmtList RBRACE

    ID  shift, and go to state 8


State 2

    9 VarDecl: ARRAY • TYPE ID LBRACKET INT_NUMBER RBRACKET SEMI

    TYPE  shift, and go to state 9


State 3

    0 $accept: Program • $end

    $end  shift, and go to state 10


State 4

    1 Program: DeclList • StmtList

    TYPE    shift, and go to state 11
    ID      shift, and go to state 12
    WRITE   shift, and go to state 13
    RETURN  shift, and go to state 14
    IF      shift, and go to state 15

    $default  reduce using rule 17 (StmtList)

    VarDeclInit  go to state 16
    StmtList     go to state 17
    Stmt         go to state 18
    IfStmt       go to state 19
    FuncCall     go to state 20
    ReturnStmt   go to state 21


State 5

    3 DeclList: VarDecl • DeclList

    TYPE   shift, and go to state 1
    ARRAY  shift, and go to state 2

    TYPE      [reduce using rule 2 (DeclList)]
    $default  reduce using rule 2 (DeclList)

    DeclList     go to state 22
    VarDecl      go to state 5
    VarDeclInit  go to state 6
    FuncDecl     go to state 7


State 6

    4 DeclList: VarDeclInit • DeclList

    TYPE   shift, and go to state 1
    ARRAY  shift, and go to state 2

    TYPE      [reduce using rule 2 (DeclList)]
    $default  reduce using rule 2 (DeclList)

    DeclList     go to state 23
    VarDecl      go to state 5
    VarDeclInit  go to state 6
    FuncDecl     go to state 7


State 7

    5 DeclList: FuncDecl • DeclList

    TYPE   shift, and go to state 1
    ARRAY  shift, and go to state 2

    TYPE      [reduce using rule 2 (DeclList)]
    $default  reduce using rule 2 (DeclList)

    DeclList     go to state 24
    VarDecl      go to state 5
    VarDeclInit  go to state 6
    FuncDecl     go to state 7


State 8

    8 VarDecl: TYPE ID • SEMI
   10 VarDeclInit: TYPE ID • ASSIGN Expr SEMI
   12 FuncDecl: TYPE ID • @1 LPAREN ParamList RPAREN LBRACE VarDeclList StmtList RBRACE

    SEMI    shift, and go to state 25
    ASSIGN  shift, and go to state 26

    $default  reduce using rule 11 (@1)

    @1  go to state 27


State 9

    9 VarDecl: ARRAY TYPE • ID LBRACKET INT_NUMBER RBRACKET SEMI

    ID  shift, and go to state 28


State 10

    0 $accept: Program $end •

    $default  accept


State 11

   10 VarDeclInit: TYPE • ID ASSIGN Expr SEMI

    ID  shift, and go to state 29


State 12

   19 Stmt: ID • ASSIGN Expr SEMI
   20     | ID • LBRACKET Expr RBRACKET ASSIGN Expr SEMI
   57 FuncCall: ID • LPAREN ArgList RPAREN

    ASSIGN    shift, and go to state 30
    LPAREN    shift, and go to state 31
    LBRACKET  shift, and go to state 32


State 13

   22 Stmt: WRITE • Expr SEMI

    ID            shift, and go to state 33
    INT_NUMBER    shift, and go to state 34
    FLOAT_NUMBER  shift, and go to state 35
    CHAR_VALUE    shift, and go to state 36
    CONST_TRUE    shift, and go to state 37
    CONST_FALSE   shift, and go to state 38
    LPAREN        shift, and go to state 39
    NOT           shift, and go to state 40
    MINUS         shift, and go to state 41

    Expr      go to state 42
    FuncCall  go to state 43


State 14

   62 ReturnStmt: RETURN •
   63           | RETURN • Expr

    ID            shift, and go to state 33
    INT_NUMBER    shift, and go to state 34
    FLOAT_NUMBER  shift, and go to state 35
    CHAR_VALUE    shift, and go to state 36
    CONST_TRUE    shift, and go to state 37
    CONST_FALSE   shift, and go to state 38
    LPAREN        shift, and go to state 39
    NOT           shift, and go to state 40
    MINUS         shift, and go to state 41

    $default  reduce using rule 62 (ReturnStmt)

    Expr      go to state 44
    FuncCall  go to state 43


State 15

   26 IfStmt: IF • LPAREN Expr RPAREN Block
   27       | IF • LPAREN Expr RPAREN Block ELSE Block
   28       | IF • LPAREN Expr RPAREN Block ElifList

    LPAREN  shift, and go to state 45


State 16

   21 Stmt: VarDeclInit •

    $default  reduce using rule 21 (Stmt)


State 17

    1 Program: DeclList StmtList •

    $default  reduce using rule 1 (Program)


State 18

   18 StmtList: Stmt • StmtList

    TYPE    shift, and go to state 11
    ID      shift, and go to state 12
    WRITE   shift, and go to state 13
    RETURN  shift, and go to state 14
    IF      shift, and go to state 15

    $default  reduce using rule 17 (StmtList)

    VarDeclInit  go to state 16
    StmtList     go to state 46
    Stmt         go to state 18
    IfStmt       go to state 19
    FuncCall     go to state 20
    ReturnStmt   go to state 21


State 19

   25 Stmt: IfStmt •

    $default  reduce using rule 25 (Stmt)


State 20

   23 Stmt: FuncCall • SEMI

    SEMI  shift, and go to state 47


State 21

   24 Stmt: ReturnStmt • SEMI

    SEMI  shift, and go to state 48


State 22

    3 DeclList: VarDecl DeclList •

    $default  reduce using rule 3 (DeclList)


State 23

    4 DeclList: VarDeclInit DeclList •

    $default  reduce using rule 4 (DeclList)


State 24

    5 DeclList: FuncDecl DeclList •

    $default  reduce using rule 5 (DeclList)


State 25

    8 VarDecl: TYPE ID SEMI •

    $default  reduce using rule 8 (VarDecl)


State 26

   10 VarDeclInit: TYPE ID ASSIGN • Expr SEMI

    ID            shift, and go to state 33
    INT_NUMBER    shift, and go to state 34
    FLOAT_NUMBER  shift, and go to state 35
    CHAR_VALUE    shift, and go to state 36
    CONST_TRUE    shift, and go to state 37
    CONST_FALSE   shift, and go to state 38
    LPAREN        shift, and go to state 39
    NOT           shift, and go to state 40
    MINUS         shift, and go to state 41

    Expr      go to state 49
    FuncCall  go to state 43


State 27

   12 FuncDecl: TYPE ID @1 • LPAREN ParamList RPAREN LBRACE VarDeclList StmtList RBRACE

    LPAREN  shift, and go to state 50


State 28

    9 VarDecl: ARRAY TYPE ID • LBRACKET INT_NUMBER RBRACKET SEMI

    LBRACKET  shift, and go to state 51


State 29

   10 VarDeclInit: TYPE ID • ASSIGN Expr SEMI

    ASSIGN  shift, and go to state 26


State 30

   19 Stmt: ID ASSIGN • Expr SEMI

    ID            shift, and go to state 33
    INT_NUMBER    shift, and go to state 34
    FLOAT_NUMBER  shift, and go to state 35
    CHAR_VALUE    shift, and go to state 36
    CONST_TRUE    shift, and go to state 37
    CONST_FALSE   shift, and go to state 38
    LPAREN        shift, and go to state 39
    NOT           shift, and go to state 40
    MINUS         shift, and go to state 41

    Expr      go to state 52
    FuncCall  go to state 43


State 31

   57 FuncCall: ID LPAREN • ArgList RPAREN

    ID            shift, and go to state 33
    INT_NUMBER    shift, and go to state 34
    FLOAT_NUMBER  shift, and go to state 35
    CHAR_VALUE    shift, and go to state 36
    CONST_TRUE    shift, and go to state 37
    CONST_FALSE   shift, and go to state 38
    LPAREN        shift, and go to state 39
    NOT           shift, and go to state 40
    MINUS         shift, and go to state 41

    $default  reduce using rule 58 (ArgList)

    Expr      go to state 53
    FuncCall  go to state 43
    ArgList   go to state 54
    Arg       go to state 55


State 32

   20 Stmt: ID LBRACKET • Expr RBRACKET ASSIGN Expr SEMI

    ID            shift, and go to state 33
    INT_NUMBER    shift, and go to state 34
    FLOAT_NUMBER  shift, and go to state 35
    CHAR_VALUE    shift, and go to state 36
    CONST_TRUE    shift, and go to state 37
    CONST_FALSE   shift, and go to state 38
    LPAREN        shift, and go to state 39
    NOT           shift, and go to state 40
    MINUS         shift, and go to state 41

    Expr      go to state 56
    FuncCall  go to state 43


State 33

   48 Expr: ID •
   49     | ID • LBRACKET Expr RBRACKET
   57 FuncCall: ID • LPAREN ArgList RPAREN

    LPAREN    shift, and go to state 31
    LBRACKET  shift, and go to state 57

    $default  reduce using rule 48 (Expr)


State 34

   50 Expr: INT_NUMBER •

    $default  reduce using rule 50 (Expr)


State 35

   51 Expr: FLOAT_NUMBER •

    $default  reduce using rule 51 (Expr)


State 36

   52 Expr: CHAR_VALUE •

    $default  reduce using rule 52 (Expr)


State 37

   53 Expr: CONST_TRUE •

    $default  reduce using rule 53 (Expr)


State 38

   54 Expr: CONST_FALSE •

    $default  reduce using rule 54 (Expr)


State 39

   56 Expr: LPAREN • Expr RPAREN

    ID            shift, and go to state 33
    INT_NUMBER    shift, and go to state 34
    FLOAT_NUMBER  shift, and go to state 35
    CHAR_VALUE    shift, and go to state 36
    CONST_TRUE    shift, and go to state 37
    CONST_FALSE   shift, and go to state 38
    LPAREN        shift, and go to state 39
    NOT           shift, and go to state 40
    MINUS         shift, and go to state 41

    Expr      go to state 58
    FuncCall  go to state 43


State 40

   35 Expr: NOT • Expr

    ID            shift, and go to state 33
    INT_NUMBER    shift, and go to state 34
    FLOAT_NUMBER  shift, and go to state 35
    CHAR_VALUE    shift, and go to state 36
    CONST_TRUE    shift, and go to state 37
    CONST_FALSE   shift, and go to state 38
    LPAREN        shift, and go to state 39
    NOT           shift, and go to state 40
    MINUS         shift, and go to state 41

    Expr      go to state 59
    FuncCall  go to state 43


State 41

   34 Expr: MINUS • Expr

    ID            shift, and go to state 33
    INT_NUMBER    shift, and go to state 34
    FLOAT_NUMBER  shift, and go to state 35
    CHAR_VALUE    shift, and go to state 36
    CONST_TRUE    shift, and go to state 37
    CONST_FALSE   shift, and go to state 38
    LPAREN        shift, and go to state 39
    NOT           shift, and go to state 40
    MINUS         shift, and go to state 41

    Expr      go to state 60
    FuncCall  go to state 43


State 42

   22 Stmt: WRITE Expr • SEMI
   36 Expr: Expr • PLUS Expr
   37     | Expr • MINUS Expr
   38     | Expr • MULTIPLY Expr
   39     | Expr • DIVIDE Expr
   40     | Expr • AND Expr
   41     | Expr • OR Expr
   42     | Expr • GREATER_THAN Expr
   43     | Expr • LESS_THAN Expr
   44     | Expr • GREATER_EQUAL Expr
   45     | Expr • LESS_EQUAL Expr
   46     | Expr • EQUAL_EQUAL Expr
   47     | Expr • NOT_EQUAL Expr

    SEMI           shift, and go to state 61
    AND            shift, and go to state 62
    OR             shift, and go to state 63
    GREATER_THAN   shift, and go to state 64
    LESS_THAN      shift, and go to state 65
    EQUAL_EQUAL    shift, and go to state 66
    NOT_EQUAL      shift, and go to state 67
    GREATER_EQUAL  shift, and go to state 68
    LESS_EQUAL     shift, and go to state 69
    PLUS           shift, and go to state 70
    MINUS          shift, and go to state 71
    MULTIPLY       shift, and go to state 72
    DIVIDE         shift, and go to state 73


State 43

   55 Expr: FuncCall •

    $default  reduce using rule 55 (Expr)


State 44

   36 Expr: Expr • PLUS Expr
   37     | Expr • MINUS Expr
   38     | Expr • MULTIPLY Expr
   39     | Expr • DIVIDE Expr
   40     | Expr • AND Expr
   41     | Expr • OR Expr
   42     | Expr • GREATER_THAN Expr
   43     | Expr • LESS_THAN Expr
   44     | Expr • GREATER_EQUAL Expr
   45     | Expr • LESS_EQUAL Expr
   46     | Expr • EQUAL_EQUAL Expr
   47     | Expr • NOT_EQUAL Expr
   63 ReturnStmt: RETURN Expr •

    AND            shift, and go to state 62
    OR             shift, and go to state 63
    GREATER_THAN   shift, and go to state 64
    LESS_THAN      shift, and go to state 65
    EQUAL_EQUAL    shift, and go to state 66
    NOT_EQUAL      shift, and go to state 67
    GREATER_EQUAL  shift, and go to state 68
    LESS_EQUAL     shift, and go to state 69
    PLUS           shift, and go to state 70
    MINUS          shift, and go to state 71
    MULTIPLY       shift, and go to state 72
    DIVIDE         shift, and go to state 73

    $default  reduce using rule 63 (ReturnStmt)


State 45

   26 IfStmt: IF LPAREN • Expr RPAREN Block
   27       | IF LPAREN • Expr RPAREN Block ELSE Block
   28       | IF LPAREN • Expr RPAREN Block ElifList

    ID            shift, and go to state 33
    INT_NUMBER    shift, and go to state 34
    FLOAT_NUMBER  shift, and go to state 35
    CHAR_VALUE    shift, and go to state 36
    CONST_TRUE    shift, and go to state 37
    CONST_FALSE   shift, and go to state 38
    LPAREN        shift, and go to state 39
    NOT           shift, and go to state 40
    MINUS         shift, and go to state 41

    Expr      go to state 74
    FuncCall  go to state 43


State 46

   18 StmtList: Stmt StmtList •

    $default  reduce using rule 18 (StmtList)


State 47

   23 Stmt: FuncCall SEMI •

    $default  reduce using rule 23 (Stmt)


State 48

   24 Stmt: ReturnStmt SEMI •

    $default  reduce using rule 24 (Stmt)


State 49

   10 VarDeclInit: TYPE ID ASSIGN Expr • SEMI
   36 Expr: Expr • PLUS Expr
   37     | Expr • MINUS Expr
   38     | Expr • MULTIPLY Expr
   39     | Expr • DIVIDE Expr
   40     | Expr • AND Expr
   41     | Expr • OR Expr
   42     | Expr • GREATER_THAN Expr
   43     | Expr • LESS_THAN Expr
   44     | Expr • GREATER_EQUAL Expr
   45     | Expr • LESS_EQUAL Expr
   46     | Expr • EQUAL_EQUAL Expr
   47     | Expr • NOT_EQUAL Expr

    SEMI           shift, and go to state 75
    AND            shift, and go to state 62
    OR             shift, and go to state 63
    GREATER_THAN   shift, and go to state 64
    LESS_THAN      shift, and go to state 65
    EQUAL_EQUAL    shift, and go to state 66
    NOT_EQUAL      shift, and go to state 67
    GREATER_EQUAL  shift, and go to state 68
    LESS_EQUAL     shift, and go to state 69
    PLUS           shift, and go to state 70
    MINUS          shift, and go to state 71
    MULTIPLY       shift, and go to state 72
    DIVIDE         shift, and go to state 73


State 50

   12 FuncDecl: TYPE ID @1 LPAREN • ParamList RPAREN LBRACE VarDeclList StmtList RBRACE

    TYPE  shift, and go to state 76

    $default  reduce using rule 13 (ParamList)

    ParamList  go to state 77
    Param      go to state 78


State 51

    9 VarDecl: ARRAY TYPE ID LBRACKET • INT_NUMBER RBRACKET SEMI

    INT_NUMBER  shift, and go to state 79


State 52

   19 Stmt: ID ASSIGN Expr • SEMI
   36 Expr: Expr • PLUS Expr
   37     | Expr • MINUS Expr
   38     | Expr • MULTIPLY Expr
   39     | Expr • DIVIDE Expr
   40     | Expr • AND Expr
   41     | Expr • OR Expr
   42     | Expr • GREATER_THAN Expr
   43     | Expr • LESS_THAN Expr
   44     | Expr • GREATER_EQUAL Expr
   45     | Expr • LESS_EQUAL Expr
   46     | Expr • EQUAL_EQUAL Expr
   47     | Expr • NOT_EQUAL Expr

    SEMI           shift, and go to state 80
    AND            shift, and go to state 62
    OR             shift, and go to state 63
    GREATER_THAN   shift, and go to state 64
    LESS_THAN      shift, and go to state 65
    EQUAL_EQUAL    shift, and go to state 66
    NOT_EQUAL      shift, and go to state 67
    GREATER_EQUAL  shift, and go to state 68
    LESS_EQUAL     shift, and go to state 69
    PLUS           shift, and go to state 70
    MINUS          shift, and go to state 71
    MULTIPLY       shift, and go to state 72
    DIVIDE         shift, and go to state 73


State 53

   36 Expr: Expr • PLUS Expr
   37     | Expr • MINUS Expr
   38     | Expr • MULTIPLY Expr
   39     | Expr • DIVIDE Expr
   40     | Expr • AND Expr
   41     | Expr • OR Expr
   42     | Expr • GREATER_THAN Expr
   43     | Expr • LESS_THAN Expr
   44     | Expr • GREATER_EQUAL Expr
   45     | Expr • LESS_EQUAL Expr
   46     | Expr • EQUAL_EQUAL Expr
   47     | Expr • NOT_EQUAL Expr
   61 Arg: Expr •

    AND            shift, and go to state 62
    OR             shift, and go to state 63
    GREATER_THAN   shift, and go to state 64
    LESS_THAN      shift, and go to state 65
    EQUAL_EQUAL    shift, and go to state 66
    NOT_EQUAL      shift, and go to state 67
    GREATER_EQUAL  shift, and go to state 68
    LESS_EQUAL     shift, and go to state 69
    PLUS           shift, and go to state 70
    MINUS          shift, and go to state 71
    MULTIPLY       shift, and go to state 72
    DIVIDE         shift, and go to state 73

    $default  reduce using rule 61 (Arg)


State 54

   57 FuncCall: ID LPAREN ArgList • RPAREN

    RPAREN  shift, and go to state 81


State 55

   59 ArgList: Arg •
   60        | Arg • COMMA ArgList

    COMMA  shift, and go to state 82

    $default  reduce using rule 59 (ArgList)


State 56

   20 Stmt: ID LBRACKET Expr • RBRACKET ASSIGN Expr SEMI
   36 Expr: Expr • PLUS Expr
   37     | Expr • MINUS Expr
   38     | Expr • MULTIPLY Expr
   39     | Expr • DIVIDE Expr
   40     | Expr • AND Expr
   41     | Expr • OR Expr
   42     | Expr • GREATER_THAN Expr
   43     | Expr • LESS_THAN Expr
   44     | Expr • GREATER_EQUAL Expr
   45     | Expr • LESS_EQUAL Expr
   46     | Expr • EQUAL_EQUAL Expr
   47     | Expr • NOT_EQUAL Expr

    RBRACKET       shift, and go to state 83
    AND            shift, and go to state 62
    OR             shift, and go to state 63
    GREATER_THAN   shift, and go to state 64
    LESS_THAN      shift, and go to state 65
    EQUAL_EQUAL    shift, and go to state 66
    NOT_EQUAL      shift, and go to state 67
    GREATER_EQUAL  shift, and go to state 68
    LESS_EQUAL     shift, and go to state 69
    PLUS           shift, and go to state 70
    MINUS          shift, and go to state 71
    MULTIPLY       shift, and go to state 72
    DIVIDE         shift, and go to state 73


State 57

   49 Expr: ID LBRACKET • Expr RBRACKET

    ID            shift, and go to state 33
    INT_NUMBER    shift, and go to state 34
    FLOAT_NUMBER  shift, and go to state 35
    CHAR_VALUE    shift, and go to state 36
    CONST_TRUE    shift, and go to state 37
    CONST_FALSE   shift, and go to state 38
    LPAREN        shift, and go to state 39
    NOT           shift, and go to state 40
    MINUS         shift, and go to state 41

    Expr      go to state 84
    FuncCall  go to state 43


State 58

   36 Expr: Expr • PLUS Expr
   37     | Expr • MINUS Expr
   38     | Expr • MULTIPLY Expr
   39     | Expr • DIVIDE Expr
   40     | Expr • AND Expr
   41     | Expr • OR Expr
   42     | Expr • GREATER_THAN Expr
   43     | Expr • LESS_THAN Expr
   44     | Expr • GREATER_EQUAL Expr
   45     | Expr • LESS_EQUAL Expr
   46     | Expr • EQUAL_EQUAL Expr
   47     | Expr • NOT_EQUAL Expr
   56     | LPAREN Expr • RPAREN

    RPAREN         shift, and go to state 85
    AND            shift, and go to state 62
    OR             shift, and go to state 63
    GREATER_THAN   shift, and go to state 64
    LESS_THAN      shift, and go to state 65
    EQUAL_EQUAL    shift, and go to state 66
    NOT_EQUAL      shift, and go to state 67
    GREATER_EQUAL  shift, and go to state 68
    LESS_EQUAL     shift, and go to state 69
    PLUS           shift, and go to state 70
    MINUS          shift, and go to state 71
    MULTIPLY       shift, and go to state 72
    DIVIDE         shift, and go to state 73


State 59

   35 Expr: NOT Expr •
   36     | Expr • PLUS Expr
   37     | Expr • MINUS Expr
   38     | Expr • MULTIPLY Expr
   39     | Expr • DIVIDE Expr
   40     | Expr • AND Expr
   41     | Expr • OR Expr
   42     | Expr • GREATER_THAN Expr
   43     | Expr • LESS_THAN Expr
   44     | Expr • GREATER_EQUAL Expr
   45     | Expr • LESS_EQUAL Expr
   46     | Expr • EQUAL_EQUAL Expr
   47     | Expr • NOT_EQUAL Expr

    GREATER_THAN   shift, and go to state 64
    LESS_THAN      shift, and go to state 65
    EQUAL_EQUAL    shift, and go to state 66
    NOT_EQUAL      shift, and go to state 67
    GREATER_EQUAL  shift, and go to state 68
    LESS_EQUAL     shift, and go to state 69
    PLUS           shift, and go to state 70
    MINUS          shift, and go to state 71
    MULTIPLY       shift, and go to state 72
    DIVIDE         shift, and go to state 73

    $default  reduce using rule 35 (Expr)


State 60

   34 Expr: MINUS Expr •
   36     | Expr • PLUS Expr
   37     | Expr • MINUS Expr
   38     | Expr • MULTIPLY Expr
   39     | Expr • DIVIDE Expr
   40     | Expr • AND Expr
   41     | Expr • OR Expr
   42     | Expr • GREATER_THAN Expr
   43     | Expr • LESS_THAN Expr
   44     | Expr • GREATER_EQUAL Expr
   45     | Expr • LESS_EQUAL Expr
   46     | Expr • EQUAL_EQUAL Expr
   47     | Expr • NOT_EQUAL Expr

    MULTIPLY  shift, and go to state 72
    DIVIDE    shift, and go to state 73

    $default  reduce using rule 34 (Expr)


State 61

   22 Stmt: WRITE Expr SEMI •

    $default  reduce using rule 22 (Stmt)


State 62

   40 Expr: Expr AND • Expr

    ID            shift, and go to state 33
    INT_NUMBER    shift, and go to state 34
    FLOAT_NUMBER  shift, and go to state 35
    CHAR_VALUE    shift, and go to state 36
    CONST_TRUE    shift, and go to state 37
    CONST_FALSE   shift, and go to state 38
    LPAREN        shift, and go to state 39
    NOT           shift, and go to state 40
    MINUS         shift, and go to state 41

    Expr      go to state 86
    FuncCall  go to state 43


State 63

   41 Expr: Expr OR • Expr

    ID            shift, and go to state 33
    INT_NUMBER    shift, and go to state 34
    FLOAT_NUMBER  shift, and go to state 35
    CHAR_VALUE    shift, and go to state 36
    CONST_TRUE    shift, and go to state 37
    CONST_FALSE   shift, and go to state 38
    LPAREN        shift, and go to state 39
    NOT           shift, and go to state 40
    MINUS         shift, and go to state 41

    Expr      go to state 87
    FuncCall  go to state 43


State 64

   42 Expr: Expr GREATER_THAN • Expr

    ID            shift, and go to state 33
    INT_NUMBER    shift, and go to state 34
    FLOAT_NUMBER  shift, and go to state 35
    CHAR_VALUE    shift, and go to state 36
    CONST_TRUE    shift, and go to state 37
    CONST_FALSE   shift, and go to state 38
    LPAREN        shift, and go to state 39
    NOT           shift, and go to state 40
    MINUS         shift, and go to state 41

    Expr      go to state 88
    FuncCall  go to state 43


State 65

   43 Expr: Expr LESS_THAN • Expr

    ID            shift, and go to state 33
    INT_NUMBER    shift, and go to state 34
    FLOAT_NUMBER  shift, and go to state 35
    CHAR_VALUE    shift, and go to state 36
    CONST_TRUE    shift, and go to state 37
    CONST_FALSE   shift, and go to state 38
    LPAREN        shift, and go to state 39
    NOT           shift, and go to state 40
    MINUS         shift, and go to state 41

    Expr      go to state 89
    FuncCall  go to state 43


State 66

   46 Expr: Expr EQUAL_EQUAL • Expr

    ID            shift, and go to state 33
    INT_NUMBER    shift, and go to state 34
    FLOAT_NUMBER  shift, and go to state 35
    CHAR_VALUE    shift, and go to state 36
    CONST_TRUE    shift, and go to state 37
    CONST_FALSE   shift, and go to state 38
    LPAREN        shift, and go to state 39
    NOT           shift, and go to state 40
    MINUS         shift, and go to state 41

    Expr      go to state 90
    FuncCall  go to state 43


State 67

   47 Expr: Expr NOT_EQUAL • Expr

    ID            shift, and go to state 33
    INT_NUMBER    shift, and go to state 34
    FLOAT_NUMBER  shift, and go to state 35
    CHAR_VALUE    shift, and go to state 36
    CONST_TRUE    shift, and go to state 37
    CONST_FALSE   shift, and go to state 38
    LPAREN        shift, and go to state 39
    NOT           shift, and go to state 40
    MINUS         shift, and go to state 41

    Expr      go to state 91
    FuncCall  go to state 43


State 68

   44 Expr: Expr GREATER_EQUAL • Expr

    ID            shift, and go to state 33
    INT_NUMBER    shift, and go to state 34
    FLOAT_NUMBER  shift, and go to state 35
    CHAR_VALUE    shift, and go to state 36
    CONST_TRUE    shift, and go to state 37
    CONST_FALSE   shift, and go to state 38
    LPAREN        shift, and go to state 39
    NOT           shift, and go to state 40
    MINUS         shift, and go to state 41

    Expr      go to state 92
    FuncCall  go to state 43


State 69

   45 Expr: Expr LESS_EQUAL • Expr

    ID            shift, and go to state 33
    INT_NUMBER    shift, and go to state 34
    FLOAT_NUMBER  shift, and go to state 35
    CHAR_VALUE    shift, and go to state 36
    CONST_TRUE    shift, and go to state 37
    CONST_FALSE   shift, and go to state 38
    LPAREN        shift, and go to state 39
    NOT           shift, and go to state 40
    MINUS         shift, and go to state 41

    Expr      go to state 93
    FuncCall  go to state 43


State 70

   36 Expr: Expr PLUS • Expr

    ID            shift, and go to state 33
    INT_NUMBER    shift, and go to state 34
    FLOAT_NUMBER  shift, and go to state 35
    CHAR_VALUE    shift, and go to state 36
    CONST_TRUE    shift, and go to state 37
    CONST_FALSE   shift, and go to state 38
    LPAREN        shift, and go to state 39
    NOT           shift, and go to state 40
    MINUS         shift, and go to state 41

    Expr      go to state 94
    FuncCall  go to state 43


State 71

   37 Expr: Expr MINUS • Expr

    ID            shift, and go to state 33
    INT_NUMBER    shift, and go to state 34
    FLOAT_NUMBER  shift, and go to state 35
    CHAR_VALUE    shift, and go to state 36
    CONST_TRUE    shift, and go to state 37
    CONST_FALSE   shift, and go to state 38
    LPAREN        shift, and go to state 39
    NOT           shift, and go to state 40
    MINUS         shift, and go to state 41

    Expr      go to state 95
    FuncCall  go to state 43


State 72

   38 Expr: Expr MULTIPLY • Expr

    ID            shift, and go to state 33
    INT_NUMBER    shift, and go to state 34
    FLOAT_NUMBER  shift, and go to state 35
    CHAR_VALUE    shift, and go to state 36
    CONST_TRUE    shift, and go to state 37
    CONST_FALSE   shift, and go to state 38
    LPAREN        shift, and go to state 39
    NOT           shift, and go to state 40
    MINUS         shift, and go to state 41

    Expr      go to state 96
    FuncCall  go to state 43


State 73

   39 Expr: Expr DIVIDE • Expr

    ID            shift, and go to state 33
    INT_NUMBER    shift, and go to state 34
    FLOAT_NUMBER  shift, and go to state 35
    CHAR_VALUE    shift, and go to state 36
    CONST_TRUE    shift, and go to state 37
    CONST_FALSE   shift, and go to state 38
    LPAREN        shift, and go to state 39
    NOT           shift, and go to state 40
    MINUS         shift, and go to state 41

    Expr      go to state 97
    FuncCall  go to state 43


State 74

   26 IfStmt: IF LPAREN Expr • RPAREN Block
   27       | IF LPAREN Expr • RPAREN Block ELSE Block
   28       | IF LPAREN Expr • RPAREN Block ElifList
   36 Expr: Expr • PLUS Expr
   37     | Expr • MINUS Expr
   38     | Expr • MULTIPLY Expr
   39     | Expr • DIVIDE Expr
   40     | Expr • AND Expr
   41     | Expr • OR Expr
   42     | Expr • GREATER_THAN Expr
   43     | Expr • LESS_THAN Expr
   44     | Expr • GREATER_EQUAL Expr
   45     | Expr • LESS_EQUAL Expr
   46     | Expr • EQUAL_EQUAL Expr
   47     | Expr • NOT_EQUAL Expr

    RPAREN         shift, and go to state 98
    AND            shift, and go to state 62
    OR             shift, and go to state 63
    GREATER_THAN   shift, and go to state 64
    LESS_THAN      shift, and go to state 65
    EQUAL_EQUAL    shift, and go to state 66
    NOT_EQUAL      shift, and go to state 67
    GREATER_EQUAL  shift, and go to state 68
    LESS_EQUAL     shift, and go to state 69
    PLUS           shift, and go to state 70
    MINUS          shift, and go to state 71
    MULTIPLY       shift, and go to state 72
    DIVIDE         shift, and go to state 73


State 75

   10 VarDeclInit: TYPE ID ASSIGN Expr SEMI •

    $default  reduce using rule 10 (VarDeclInit)


State 76

   16 Param: TYPE • ID

    ID  shift, and go to state 99


State 77

   12 FuncDecl: TYPE ID @1 LPAREN ParamList • RPAREN LBRACE VarDeclList StmtList RBRACE

    RPAREN  shift, and go to state 100


State 78

   14 ParamList: Param •
   15          | Param • COMMA ParamList

    COMMA  shift, and go to state 101

    $default  reduce using rule 14 (ParamList)


State 79

    9 VarDecl: ARRAY TYPE ID LBRACKET INT_NUMBER • RBRACKET SEMI

    RBRACKET  shift, and go to state 102


State 80

   19 Stmt: ID ASSIGN Expr SEMI •

    $default  reduce using rule 19 (Stmt)


State 81

   57 FuncCall: ID LPAREN ArgList RPAREN •

    $default  reduce using rule 57 (FuncCall)


State 82

   60 ArgList: Arg COMMA • ArgList

    ID            shift, and go to state 33
    INT_NUMBER    shift, and go to state 34
    FLOAT_NUMBER  shift, and go to state 35
    CHAR_VALUE    shift, and go to state 36
    CONST_TRUE    shift, and go to state 37
    CONST_FALSE   shift, and go to state 38
    LPAREN        shift, and go to state 39
    NOT           shift, and go to state 40
    MINUS         shift, and go to state 41

    $default  reduce using rule 58 (ArgList)

    Expr      go to state 53
    FuncCall  go to state 43
    ArgList   go to state 103
    Arg       go to state 55


State 83

   20 Stmt: ID LBRACKET Expr RBRACKET • ASSIGN Expr SEMI

    ASSIGN  shift, and go to state 104


State 84

   36 Expr: Expr • PLUS Expr
   37     | Expr • MINUS Expr
   38     | Expr • MULTIPLY Expr
   39     | Expr • DIVIDE Expr
   40     | Expr • AND Expr
   41     | Expr • OR Expr
   42     | Expr • GREATER_THAN Expr
   43     | Expr • LESS_THAN Expr
   44     | Expr • GREATER_EQUAL Expr
   45     | Expr • LESS_EQUAL Expr
   46     | Expr • EQUAL_EQUAL Expr
   47     | Expr • NOT_EQUAL Expr
   49     | ID LBRACKET Expr • RBRACKET

    RBRACKET       shift, and go to state 105
    AND            shift, and go to state 62
    OR             shift, and go to state 63
    GREATER_THAN   shift, and go to state 64
    LESS_THAN      shift, and go to state 65
    EQUAL_EQUAL    shift, and go to state 66
    NOT_EQUAL      shift, and go to state 67
    GREATER_EQUAL  shift, and go to state 68
    LESS_EQUAL     shift, and go to state 69
    PLUS           shift, and go to state 70
    MINUS          shift, and go to state 71
    MULTIPLY       shift, and go to state 72
    DIVIDE         shift, and go to state 73


State 85

   56 Expr: LPAREN Expr RPAREN •

    $default  reduce using rule 56 (Expr)


State 86

   36 Expr: Expr • PLUS Expr
   37     | Expr • MINUS Expr
   38     | Expr • MULTIPLY Expr
   39     | Expr • DIVIDE Expr
   40     | Expr • AND Expr
   40     | Expr AND Expr •
   41     | Expr • OR Expr
   42     | Expr • GREATER_THAN Expr
   43     | Expr • LESS_THAN Expr
   44     | Expr • GREATER_EQUAL Expr
   45     | Expr • LESS_EQUAL Expr
   46     | Expr • EQUAL_EQUAL Expr
   47     | Expr • NOT_EQUAL Expr

    GREATER_THAN   shift, and go to state 64
    LESS_THAN      shift, and go to state 65
    EQUAL_EQUAL    shift, and go to state 66
    NOT_EQUAL      shift, and go to state 67
    GREATER_EQUAL  shift, and go to state 68
    LESS_EQUAL     shift, and go to state 69
    PLUS           shift, and go to state 70
    MINUS          shift, and go to state 71
    MULTIPLY       shift, and go to state 72
    DIVIDE         shift, and go to state 73

    $default  reduce using rule 40 (Expr)


State 87

   36 Expr: Expr • PLUS Expr
   37     | Expr • MINUS Expr
   38     | Expr • MULTIPLY Expr
   39     | Expr • DIVIDE Expr
   40     | Expr • AND Expr
   41     | Expr • OR Expr
   41     | Expr OR Expr •
   42     | Expr • GREATER_THAN Expr
   43     | Expr • LESS_THAN Expr
   44     | Expr • GREATER_EQUAL Expr
   45     | Expr • LESS_EQUAL Expr
   46     | Expr • EQUAL_EQUAL Expr
   47     | Expr • NOT_EQUAL Expr

    GREATER_THAN   shift, and go to state 64
    LESS_THAN      shift, and go to state 65
    EQUAL_EQUAL    shift, and go to state 66
    NOT_EQUAL      shift, and go to state 67
    GREATER_EQUAL  shift, and go to state 68
    LESS_EQUAL     shift, and go to state 69
    PLUS           shift, and go to state 70
    MINUS          shift, and go to state 71
    MULTIPLY       shift, and go to state 72
    DIVIDE         shift, and go to state 73

    $default  reduce using rule 41 (Expr)


State 88

   36 Expr: Expr • PLUS Expr
   37     | Expr • MINUS Expr
   38     | Expr • MULTIPLY Expr
   39     | Expr • DIVIDE Expr
   40     | Expr • AND Expr
   41     | Expr • OR Expr
   42     | Expr • GREATER_THAN Expr
   42     | Expr GREATER_THAN Expr •
   43     | Expr • LESS_THAN Expr
   44     | Expr • GREATER_EQUAL Expr
   45     | Expr • LESS_EQUAL Expr
   46     | Expr • EQUAL_EQUAL Expr
   47     | Expr • NOT_EQUAL Expr

    PLUS      shift, and go to state 70
    MINUS     shift, and go to state 71
    MULTIPLY  shift, and go to state 72
    DIVIDE    shift, and go to state 73

    GREATER_THAN   error (nonassociative)
    LESS_THAN      error (nonassociative)
    EQUAL_EQUAL    error (nonassociative)
    NOT_EQUAL      error (nonassociative)
    GREATER_EQUAL  error (nonassociative)
    LESS_EQUAL     error (nonassociative)

    $default  reduce using rule 42 (Expr)


State 89

   36 Expr: Expr • PLUS Expr
   37     | Expr • MINUS Expr
   38     | Expr • MULTIPLY Expr
   39     | Expr • DIVIDE Expr
   40     | Expr • AND Expr
   41     | Expr • OR Expr
   42     | Expr • GREATER_THAN Expr
   43     | Expr • LESS_THAN Expr
   43     | Expr LESS_THAN Expr •
   44     | Expr • GREATER_EQUAL Expr
   45     | Expr • LESS_EQUAL Expr
   46     | Expr • EQUAL_EQUAL Expr
   47     | Expr • NOT_EQUAL Expr

    PLUS      shift, and go to state 70
    MINUS     shift, and go to state 71
    MULTIPLY  shift, and go to state 72
    DIVIDE    shift, and go to state 73

    GREATER_THAN   error (nonassociative)
    LESS_THAN      error (nonassociative)
    EQUAL_EQUAL    error (nonassociative)
    NOT_EQUAL      error (nonassociative)
    GREATER_EQUAL  error (nonassociative)
    LESS_EQUAL     error (nonassociative)

    $default  reduce using rule 43 (Expr)


State 90

   36 Expr: Expr • PLUS Expr
   37     | Expr • MINUS Expr
   38     | Expr • MULTIPLY Expr
   39     | Expr • DIVIDE Expr
   40     | Expr • AND Expr
   41     | Expr • OR Expr
   42     | Expr • GREATER_THAN Expr
   43     | Expr • LESS_THAN Expr
   44     | Expr • GREATER_EQUAL Expr
   45     | Expr • LESS_EQUAL Expr
   46     | Expr • EQUAL_EQUAL Expr
   46     | Expr EQUAL_EQUAL Expr •
   47     | Expr • NOT_EQUAL Expr

    PLUS      shift, and go to state 70
    MINUS     shift, and go to state 71
    MULTIPLY  shift, and go to state 72
    DIVIDE    shift, and go to state 73

    GREATER_THAN   error (nonassociative)
    LESS_THAN      error (nonassociative)
    EQUAL_EQUAL    error (nonassociative)
    NOT_EQUAL      error (nonassociative)
    GREATER_EQUAL  error (nonassociative)
    LESS_EQUAL     error (nonassociative)

    $default  reduce using rule 46 (Expr)


State 91

   36 Expr: Expr • PLUS Expr
   37     | Expr • MINUS Expr
   38     | Expr • MULTIPLY Expr
   39     | Expr • DIVIDE Expr
   40     | Expr • AND Expr
   41     | Expr • OR Expr
   42     | Expr • GREATER_THAN Expr
   43     | Expr • LESS_THAN Expr
   44     | Expr • GREATER_EQUAL Expr
   45     | Expr • LESS_EQUAL Expr
   46     | Expr • EQUAL_EQUAL Expr
   47     | Expr • NOT_EQUAL Expr
   47     | Expr NOT_EQUAL Expr •

    PLUS      shift, and go to state 70
    MINUS     shift, and go to state 71
    MULTIPLY  shift, and go to state 72
    DIVIDE    shift, and go to state 73

    GREATER_THAN   error (nonassociative)
    LESS_THAN      error (nonassociative)
    EQUAL_EQUAL    error (nonassociative)
    NOT_EQUAL      error (nonassociative)
    GREATER_EQUAL  error (nonassociative)
    LESS_EQUAL     error (nonassociative)

    $default  reduce using rule 47 (Expr)


State 92

   36 Expr: Expr • PLUS Expr
   37     | Expr • MINUS Expr
   38     | Expr • MULTIPLY Expr
   39     | Expr • DIVIDE Expr
   40     | Expr • AND Expr
   41     | Expr • OR Expr
   42     | Expr • GREATER_THAN Expr
   43     | Expr • LESS_THAN Expr
   44     | Expr • GREATER_EQUAL Expr
   44     | Expr GREATER_EQUAL Expr •
   45     | Expr • LESS_EQUAL Expr
   46     | Expr • EQUAL_EQUAL Expr
   47     | Expr • NOT_EQUAL Expr

    PLUS      shift, and go to state 70
    MINUS     shift, and go to state 71
    MULTIPLY  shift, and go to state 72
    DIVIDE    shift, and go to state 73

    GREATER_THAN   error (nonassociative)
    LESS_THAN      error (nonassociative)
    EQUAL_EQUAL    error (nonassociative)
    NOT_EQUAL      error (nonassociative)
    GREATER_EQUAL  error (nonassociative)
    LESS_EQUAL     error (nonassociative)

    $default  reduce using rule 44 (Expr)


State 93

   36 Expr: Expr • PLUS Expr
   37     | Expr • MINUS Expr
   38     | Expr • MULTIPLY Expr
   39     | Expr • DIVIDE Expr
   40     | Expr • AND Expr
   41     | Expr • OR Expr
   42     | Expr • GREATER_THAN Expr
   43     | Expr • LESS_THAN Expr
   44     | Expr • GREATER_EQUAL Expr
   45     | Expr • LESS_EQUAL Expr
   45     | Expr LESS_EQUAL Expr •
   46     | Expr • EQUAL_EQUAL Expr
   47     | Expr • NOT_EQUAL Expr

    PLUS      shift, and go to state 70
    MINUS     shift, and go to state 71
    MULTIPLY  shift, and go to state 72
    DIVIDE    shift, and go to state 73

    GREATER_THAN   error (nonassociative)
    LESS_THAN      error (nonassociative)
    EQUAL_EQUAL    error (nonassociative)
    NOT_EQUAL      error (nonassociative)
    GREATER_EQUAL  error (nonassociative)
    LESS_EQUAL     error (nonassociative)

    $default  reduce using rule 45 (Expr)


State 94

   36 Expr: Expr • PLUS Expr
   36     | Expr PLUS Expr •
   37     | Expr • MINUS Expr
   38     | Expr • MULTIPLY Expr
   39     | Expr • DIVIDE Expr
   40     | Expr • AND Expr
   41     | Expr • OR Expr
   42     | Expr • GREATER_THAN Expr
   43     | Expr • LESS_THAN Expr
   44     | Expr • GREATER_EQUAL Expr
   45     | Expr • LESS_EQUAL Expr
   46     | Expr • EQUAL_EQUAL Expr
   47     | Expr • NOT_EQUAL Expr

    MULTIPLY  shift, and go to state 72
    DIVIDE    shift, and go to state 73

    $default  reduce using rule 36 (Expr)


State 95

   36 Expr: Expr • PLUS Expr
   37     | Expr • MINUS Expr
   37     | Expr MINUS Expr •
   38     | Expr • MULTIPLY Expr
   39     | Expr • DIVIDE Expr
   40     | Expr • AND Expr
   41     | Expr • OR Expr
   42     | Expr • GREATER_THAN Expr
   43     | Expr • LESS_THAN Expr
   44     | Expr • GREATER_EQUAL Expr
   45     | Expr • LESS_EQUAL Expr
   46     | Expr • EQUAL_EQUAL Expr
   47     | Expr • NOT_EQUAL Expr

    MULTIPLY  shift, and go to state 72
    DIVIDE    shift, and go to state 73

    $default  reduce using rule 37 (Expr)


State 96

   36 Expr: Expr • PLUS Expr
   37     | Expr • MINUS Expr
   38     | Expr • MULTIPLY Expr
   38     | Expr MULTIPLY Expr •
   39     | Expr • DIVIDE Expr
   40     | Expr • AND Expr
   41     | Expr • OR Expr
   42     | Expr • GREATER_THAN Expr
   43     | Expr • LESS_THAN Expr
   44     | Expr • GREATER_EQUAL Expr
   45     | Expr • LESS_EQUAL Expr
   46     | Expr • EQUAL_EQUAL Expr
   47     | Expr • NOT_EQUAL Expr

    $default  reduce using rule 38 (Expr)


State 97

   36 Expr: Expr • PLUS Expr
   37     | Expr • MINUS Expr
   38     | Expr • MULTIPLY Expr
   39     | Expr • DIVIDE Expr
   39     | Expr DIVIDE Expr •
   40     | Expr • AND Expr
   41     | Expr • OR Expr
   42     | Expr • GREATER_THAN Expr
   43     | Expr • LESS_THAN Expr
   44     | Expr • GREATER_EQUAL Expr
   45     | Expr • LESS_EQUAL Expr
   46     | Expr • EQUAL_EQUAL Expr
   47     | Expr • NOT_EQUAL Expr

    $default  reduce using rule 39 (Expr)


State 98

   26 IfStmt: IF LPAREN Expr RPAREN • Block
   27       | IF LPAREN Expr RPAREN • Block ELSE Block
   28       | IF LPAREN Expr RPAREN • Block ElifList

    TYPE    shift, and go to state 11
    ID      shift, and go to state 12
    WRITE   shift, and go to state 13
    RETURN  shift, and go to state 14
    LBRACE  shift, and go to state 106
    IF      shift, and go to state 15

    VarDeclInit  go to state 16
    Stmt         go to state 107
    IfStmt       go to state 19
    Block        go to state 108
    FuncCall     go to state 20
    ReturnStmt   go to state 21


State 99

   16 Param: TYPE ID •

    $default  reduce using rule 16 (Param)


State 100

   12 FuncDecl: TYPE ID @1 LPAREN ParamList RPAREN • LBRACE VarDeclList StmtList RBRACE

    LBRACE  shift, and go to state 109


State 101

   15 ParamList: Param COMMA • ParamList

    TYPE  shift, and go to state 76

    $default  reduce using rule 13 (ParamList)

    ParamList  go to state 110
    Param      go to state 78


State 102

    9 VarDecl: ARRAY TYPE ID LBRACKET INT_NUMBER RBRACKET • SEMI

    SEMI  shift, and go to state 111


State 103

   60 ArgList: Arg COMMA ArgList •

    $default  reduce using rule 60 (ArgList)


State 104

   20 Stmt: ID LBRACKET Expr RBRACKET ASSIGN • Expr SEMI

    ID            shift, and go to state 33
    INT_NUMBER    shift, and go to state 34
    FLOAT_NUMBER  shift, and go to state 35
    CHAR_VALUE    shift, and go to state 36
    CONST_TRUE    shift, and go to state 37
    CONST_FALSE   shift, and go to state 38
    LPAREN        shift, and go to state 39
    NOT           shift, and go to state 40
    MINUS         shift, and go to state 41

    Expr      go to state 112
    FuncCall  go to state 43


State 105

   49 Expr: ID LBRACKET Expr RBRACKET •

    $default  reduce using rule 49 (Expr)


State 106

   32 Block: LBRACE • VarDeclList StmtList RBRACE

    TYPE   shift, and go to state 113
    ARRAY  shift, and go to state 2

    TYPE      [reduce using rule 6 (VarDeclList)]
    $default  reduce using rule 6 (VarDeclList)

    VarDeclList  go to state 114
    VarDecl      go to state 115


State 107

   33 Block: Stmt •

    $default  reduce using rule 33 (Block)


State 108

   26 IfStmt: IF LPAREN Expr RPAREN Block •
   27       | IF LPAREN Expr RPAREN Block • ELSE Block
   28       | IF LPAREN Expr RPAREN Block • ElifList

    ELSE  shift, and go to state 116
    ELIF  shift, and go to state 117

    ELSE      [reduce using rule 26 (IfStmt)]
    ELIF      [reduce using rule 26 (IfStmt)]
    $default  reduce using rule 26 (IfStmt)

    ElifList  go to state 118


State 109

   12 FuncDecl: TYPE ID @1 LPAREN ParamList RPAREN LBRACE • VarDeclList StmtList RBRACE

    TYPE   shift, and go to state 113
    ARRAY  shift, and go to state 2

    TYPE      [reduce using rule 6 (VarDeclList)]
    $default  reduce using rule 6 (VarDeclList)

    VarDeclList  go to state 119
    VarDecl      go to state 115


State 110

   15 ParamList: Param COMMA ParamList •

    $default  reduce using rule 15 (ParamList)


State 111

    9 VarDecl: ARRAY TYPE ID LBRACKET INT_NUMBER RBRACKET SEMI •

    $default  reduce using rule 9 (VarDecl)


State 112

   20 Stmt: ID LBRACKET Expr RBRACKET ASSIGN Expr • SEMI
   36 Expr: Expr • PLUS Expr
   37     | Expr • MINUS Expr
   38     | Expr • MULTIPLY Expr
   39     | Expr • DIVIDE Expr
   40     | Expr • AND Expr
   41     | Expr • OR Expr
   42     | Expr • GREATER_THAN Expr
   43     | Expr • LESS_THAN Expr
   44     | Expr • GREATER_EQUAL Expr
   45     | Expr • LESS_EQUAL Expr
   46     | Expr • EQUAL_EQUAL Expr
   47     | Expr • NOT_EQUAL Expr

    SEMI           shift, and go to state 120
    AND            shift, and go to state 62
    OR             shift, and go to state 63
    GREATER_THAN   shift, and go to state 64
    LESS_THAN      shift, and go to state 65
    EQUAL_EQUAL    shift, and go to state 66
    NOT_EQUAL      shift, and go to state 67
    GREATER_EQUAL  shift, and go to state 68
    LESS_EQUAL     shift, and go to state 69
    PLUS           shift, and go to state 70
    MINUS          shift, and go to state 71
    MULTIPLY       shift, and go to state 72
    DIVIDE         shift, and go to state 73


State 113

    8 VarDecl: TYPE • ID SEMI

    ID  shift, and go to state 121


State 114

   32 Block: LBRACE VarDeclList • StmtList RBRACE

    TYPE    shift, and go to state 11
    ID      shift, and go to state 12
    WRITE   shift, and go to state 13
    RETURN  shift, and go to state 14
    IF      shift, and go to state 15

    $default  reduce using rule 17 (StmtList)

    VarDeclInit  go to state 16
    StmtList     go to state 122
    Stmt         go to state 18
    IfStmt       go to state 19
    FuncCall     go to state 20
    ReturnStmt   go to state 21


State 115

    7 VarDeclList: VarDecl • VarDeclList

    TYPE   shift, and go to state 113
    ARRAY  shift, and go to state 2

    TYPE      [reduce using rule 6 (VarDeclList)]
    $default  reduce using rule 6 (VarDeclList)

    VarDeclList  go to state 123
    VarDecl      go to state 115


State 116

   27 IfStmt: IF LPAREN Expr RPAREN Block ELSE • Block
   31 ElifList: ELSE • Block

    TYPE    shift, and go to state 11
    ID      shift, and go to state 12
    WRITE   shift, and go to state 13
    RETURN  shift, and go to state 14
    LBRACE  shift, and go to state 106
    IF      shift, and go to state 15

    VarDeclInit  go to state 16
    Stmt         go to state 107
    IfStmt       go to state 19
    Block        go to state 124
    FuncCall     go to state 20
    ReturnStmt   go to state 21


State 117

   29 ElifList: ELIF • LPAREN Expr RPAREN Block
   30         | ELIF • LPAREN Expr RPAREN Block ElifList

    LPAREN  shift, and go to state 125


State 118

   28 IfStmt: IF LPAREN Expr RPAREN Block ElifList •

    $default  reduce using rule 28 (IfStmt)


State 119

   12 FuncDecl: TYPE ID @1 LPAREN ParamList RPAREN LBRACE VarDeclList • StmtList RBRACE

    TYPE    shift, and go to state 11
    ID      shift, and go to state 12
    WRITE   shift, and go to state 13
    RETURN  shift, and go to state 14
    IF      shift, and go to state 15

    $default  reduce using rule 17 (StmtList)

    VarDeclInit  go to state 16
    StmtList     go to state 126
    Stmt         go to state 18
    IfStmt       go to state 19
    FuncCall     go to state 20
    ReturnStmt   go to state 21


State 120

   20 Stmt: ID LBRACKET Expr RBRACKET ASSIGN Expr SEMI •

    $default  reduce using rule 20 (Stmt)


State 121

    8 VarDecl: TYPE ID • SEMI

    SEMI  shift, and go to state 25


State 122

   32 Block: LBRACE VarDeclList StmtList • RBRACE

    RBRACE  shift, and go to state 127


State 123

    7 VarDeclList: VarDecl VarDeclList •

    $default  reduce using rule 7 (VarDeclList)


State 124

   27 IfStmt: IF LPAREN Expr RPAREN Block ELSE Block •
   31 ElifList: ELSE Block •

    $end      reduce using rule 27 (IfStmt)
    $end      [reduce using rule 31 (ElifList)]
    TYPE      reduce using rule 27 (IfStmt)
    TYPE      [reduce using rule 31 (ElifList)]
    ID        reduce using rule 27 (IfStmt)
    ID        [reduce using rule 31 (ElifList)]
    WRITE     reduce using rule 27 (IfStmt)
    WRITE     [reduce using rule 31 (ElifList)]
    RETURN    reduce using rule 27 (IfStmt)
    RETURN    [reduce using rule 31 (ElifList)]
    RBRACE    reduce using rule 27 (IfStmt)
    RBRACE    [reduce using rule 31 (ElifList)]
    IF        reduce using rule 27 (IfStmt)
    IF        [reduce using rule 31 (ElifList)]
    ELSE      reduce using rule 27 (IfStmt)
    ELSE      [reduce using rule 31 (ElifList)]
    ELIF      reduce using rule 27 (IfStmt)
    ELIF      [reduce using rule 31 (ElifList)]
    $default  reduce using rule 27 (IfStmt)


State 125

   29 ElifList: ELIF LPAREN • Expr RPAREN Block
   30         | ELIF LPAREN • Expr RPAREN Block ElifList

    ID            shift, and go to state 33
    INT_NUMBER    shift, and go to state 34
    FLOAT_NUMBER  shift, and go to state 35
    CHAR_VALUE    shift, and go to state 36
    CONST_TRUE    shift, and go to state 37
    CONST_FALSE   shift, and go to state 38
    LPAREN        shift, and go to state 39
    NOT           shift, and go to state 40
    MINUS         shift, and go to state 41

    Expr      go to state 128
    FuncCall  go to state 43


State 126

   12 FuncDecl: TYPE ID @1 LPAREN ParamList RPAREN LBRACE VarDeclList StmtList • RBRACE

    RBRACE  shift, and go to state 129


State 127

   32 Block: LBRACE VarDeclList StmtList RBRACE •

    $default  reduce using rule 32 (Block)


State 128

   29 ElifList: ELIF LPAREN Expr • RPAREN Block
   30         | ELIF LPAREN Expr • RPAREN Block ElifList
   36 Expr: Expr • PLUS Expr
   37     | Expr • MINUS Expr
   38     | Expr • MULTIPLY Expr
   39     | Expr • DIVIDE Expr
   40     | Expr • AND Expr
   41     | Expr • OR Expr
   42     | Expr • GREATER_THAN Expr
   43     | Expr • LESS_THAN Expr
   44     | Expr • GREATER_EQUAL Expr
   45     | Expr • LESS_EQUAL Expr
   46     | Expr • EQUAL_EQUAL Expr
   47     | Expr • NOT_EQUAL Expr

    RPAREN         shift, and go to state 130
    AND            shift, and go to state 62
    OR             shift, and go to state 63
    GREATER_THAN   shift, and go to state 64
    LESS_THAN      shift, and go to state 65
    EQUAL_EQUAL    shift, and go to state 66
    NOT_EQUAL      shift, and go to state 67
    GREATER_EQUAL  shift, and go to state 68
    LESS_EQUAL     shift, and go to state 69
    PLUS           shift, and go to state 70
    MINUS          shift, and go to state 71
    MULTIPLY       shift, and go to state 72
    DIVIDE         shift, and go to state 73


State 129

   12 FuncDecl: TYPE ID @1 LPAREN ParamList RPAREN LBRACE VarDeclList StmtList RBRACE •

    $default  reduce using rule 12 (FuncDecl)


State 130

   29 ElifList: ELIF LPAREN Expr RPAREN • Block
   30         | ELIF LPAREN Expr RPAREN • Block ElifList

    TYPE    shift, and go to state 11
    ID      shift, and go to state 12
    WRITE   shift, and go to state 13
    RETURN  shift, and go to state 14
    LBRACE  shift, and go to state 106
    IF      shift, and go to state 15

    VarDeclInit  go to state 16
    Stmt         go to state 107
    IfStmt       go to state 19
    Block        go to state 131
    FuncCall     go to state 20
    ReturnStmt   go to state 21


State 131

   29 ElifList: ELIF LPAREN Expr RPAREN Block •
   30         | ELIF LPAREN Expr RPAREN Block • ElifList

    ELSE  shift, and go to state 132
    ELIF  shift, and go to state 117

    ELSE      [reduce using rule 29 (ElifList)]
    ELIF      [reduce using rule 29 (ElifList)]
    $default  reduce using rule 29 (ElifList)

    ElifList  go to state 133


State 132

   31 ElifList: ELSE • Block

    TYPE    shift, and go to state 11
    ID      shift, and go to state 12
    WRITE   shift, and go to state 13
    RETURN  shift, and go to state 14
    LBRACE  shift, and go to state 106
    IF      shift, and go to state 15

    VarDeclInit  go to state 16
    Stmt         go to state 107
    IfStmt       go to state 19
    Block        go to state 134
    FuncCall     go to state 20
    ReturnStmt   go to state 21


State 133

   30 ElifList: ELIF LPAREN Expr RPAREN Block ElifList •

    $default  reduce using rule 30 (ElifList)


State 134

   31 ElifList: ELSE Block •

    $default  reduce using rule 31 (ElifList)
